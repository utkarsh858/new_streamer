/* global Blob File */

/*
 * Module requirements.
 */

var isArray = require('isarray');

var toString = Object.prototype.toString;
var withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';
var withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

var x = 0;
function hasBinary (obj) {

  if (!obj || typeof obj !== 'object') {
    return false;
  }

    x++;
    if (x > 100) {

        if (x === 101) {
        console.log("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        console.log(obj);
        console.log("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        }
        return false;
    }


  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }
    return false;
  }

  if ((typeof global.Buffer === 'function' && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||
     (typeof global.ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
     (withNativeBlob && obj instanceof Blob) ||
     (withNativeFile && obj instanceof File)
    ) {
    return true;
  }

  // see: https://github.com/Automattic/has-binary/pull/4
  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
  //    var err = new Error;
   //   console.log(err.stack);
    //  return false;
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
        var err = new Error();
        console.log(err.stack);
        return true;
    }
  }

  return false;
}
